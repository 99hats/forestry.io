# Configuration for deployment to AWS with CircleCI
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
version: 2
jobs:
  build:
    docker:
    - image: circleci/node:7.10

    working_directory: ~/repo

    steps:
    - checkout

    - restore_cache:
        keys:
        - node-dependencies-{{ checksum "package.json" }}
        # fallback to using the latest cache if no exact match is found
        - node-dependencies-

    - run:
        name: Install Node Dependencies
        command: |
          npm install --production

    - save_cache:
        paths:
          - node_modules
        key: node-dependencies-{{ checksum "package.json" }}

    - run:
        name: Install Python Dependencies
        command: |
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y --no-install-recommends build-essential g++ sudo python2.7 python2.7-dev unzip curl jq
          sudo rm -rf /var/lib/apt/lists/*
          sudo mkdir -p /tmp
          cd /tmp
          curl -O https://bootstrap.pypa.io/get-pip.py
          sudo python get-pip.py
          sudo pip install awscli
          sudo rm -f /tmp/get-pip.py

    - run:
        name: Run build
        command: |
          npm run build

    - run:
        name: Create Artifacts
        command: |
          tar -zcvf dist.tar.gz ./dist

    - store_artifacts:
        path: dist.tar.gz

    - deploy:
        name: "Deploy website to AWS S3"
        command: |
          if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
            echo "Deploying branch master to S3"
            aws s3 sync ./dist s3://${AWS_S3_BUCKET}
          else
            echo "Successfully built ${CIRCLE_BRANCH}"
          fi

    - run:
        name: Update redirects
        command: |
          if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
            path_join() {
              part1=$1
              part2=$2
              if [ "${part1: -1}" == "/" ]; then
                  part1=${part1}${part2}
              else
                  part1=${part1}/${part2}
              fi
              echo $part1
            }

            for redirect in $(cat ./dist/redirects.json | jq -c '.[]'); do
              from=$(echo $redirect | jq '. | .Condition.KeyPrefixEquals' | cut -d "\"" -f 2)
              to=$(echo $redirect | jq '. | .Redirect.ReplaceKeyPrefixWith' | cut -d "\"" -f 2)

              from=$(path_join $from "index.html")

              aws s3 cp s3://${AWS_S3_BUCKET}${from} s3://${AWS_S3_BUCKET}${from} --website-redirect ${to} --metadata-directive REPLACE
            done
          fi

    - run:
        name: Invalidate Cache
        command: |
          if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
            aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DISTRIBUTION_ID} --paths "/*"
          fi